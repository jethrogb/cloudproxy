// To compile: protoc -I=. --cpp_out=. tpm2.proto

// Definition of protobufs for tpm2 applications
syntax = "proto2";

message private_key_blob_message {
  required string key_type                    = 1;
  optional string key_name                    = 2;
  optional bytes blob                         = 3;
}

message rsa_public_key_message {
  optional string key_name                    = 1;
  required int32  bit_modulus_size            = 2;
  required string exponent                    = 3;
  required string modulus                     = 4;
}

message rsa_private_key_message {
  required rsa_public_key_message public_key  = 1;
  optional string d                           = 2;
  optional string p                           = 3;
  optional string q                           = 4;
  optional string dp                          = 5;
  optional string dq                          = 6;
}

message asymmetric_key_message {
  optional rsa_private_key_message key        = 1;
}

message public_key_message {
  optional string key_type                    = 1;
  optional rsa_public_key_message rsa_key     = 2;
}

message endorsement_key_message {
  optional string machine_identifier          = 1;
  optional bytes tpm2b_blob                   = 2;
  optional bytes tpm2_name                    = 3;
  optional bytes tpm2_qualified_name          = 4;
}

message signing_instructions_message {
  optional string issuer                      = 1;
  optional int64 duration                     = 2;
  required string purpose                     = 3;
  optional string date                        = 4;
  optional string time                        = 5;
  optional string sign_alg                    = 6;
  optional string hash_alg                    = 7;
  required bool can_sign                      = 8;
}

message tpm2_make_credential_info_message {
  optional public_key_message public_key      = 1;
  optional string name                        = 2;
  optional int32 properties                   = 3;
  optional string hash_alg                    = 4;
  optional string hash                        = 5;
  optional string secret                      = 6;
}

message x509_cert_request_parameters_message {
  required string common_name                 = 1;
  optional string country_name                = 2;
  optional string state_name                  = 3;
  optional string locality_name               = 4;
  optional string organization_name           = 5;
  optional string suborganization_name        = 6;
  optional public_key_message key             = 7;
}

message x509_cert_issuer_parameters_message {
  required string common_name                 = 1;
  optional string country_name                = 2;
  optional string state_name                  = 3;
  optional string locality_name               = 4;
  optional string organization_name           = 5;
  optional string suborganization_name        = 6;
  optional string purpose                     = 7;
  optional public_key_message key             = 8;
}

message cert_parameters {
  optional x509_cert_request_parameters_message request;
  optional x509_cert_issuer_parameters_message signer;
  optional string not_before;
  optional string not_after;
}

message certificate_chain_entry_message {
  optional string subject_key_name;
  optional string issuer_key_name;
  optional string cert_type;
  optional bytes cert_blob;
}

message certificate_chain_message {
  repeated certificate_chain_entry_message entry;
}

