// Code generated by protoc-gen-go.
// source: mixnet.proto
// DO NOT EDIT!

/*
Package mixnet is a generated protocol buffer package.

It is generated from these files:
	mixnet.proto

It has these top-level messages:
	Directive
	DirectoryMessage
*/
package mixnet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DirectiveType int32

const (
	DirectiveType_ERROR     DirectiveType = 0
	DirectiveType_CREATE    DirectiveType = 1
	DirectiveType_CREATED   DirectiveType = 2
	DirectiveType_DESTROY   DirectiveType = 3
	DirectiveType_DESTROYED DirectiveType = 4
)

var DirectiveType_name = map[int32]string{
	0: "ERROR",
	1: "CREATE",
	2: "CREATED",
	3: "DESTROY",
	4: "DESTROYED",
}
var DirectiveType_value = map[string]int32{
	"ERROR":     0,
	"CREATE":    1,
	"CREATED":   2,
	"DESTROY":   3,
	"DESTROYED": 4,
}

func (x DirectiveType) Enum() *DirectiveType {
	p := new(DirectiveType)
	*p = x
	return p
}
func (x DirectiveType) String() string {
	return proto.EnumName(DirectiveType_name, int32(x))
}
func (x *DirectiveType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DirectiveType_value, data, "DirectiveType")
	if err != nil {
		return err
	}
	*x = DirectiveType(value)
	return nil
}
func (DirectiveType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DirectoryMessageType int32

const (
	DirectoryMessageType_REGISTER  DirectoryMessageType = 0
	DirectoryMessageType_DELETE    DirectoryMessageType = 1
	DirectoryMessageType_LIST      DirectoryMessageType = 2
	DirectoryMessageType_DIRECTORY DirectoryMessageType = 3
	DirectoryMessageType_DIRERROR  DirectoryMessageType = 4
)

var DirectoryMessageType_name = map[int32]string{
	0: "REGISTER",
	1: "DELETE",
	2: "LIST",
	3: "DIRECTORY",
	4: "DIRERROR",
}
var DirectoryMessageType_value = map[string]int32{
	"REGISTER":  0,
	"DELETE":    1,
	"LIST":      2,
	"DIRECTORY": 3,
	"DIRERROR":  4,
}

func (x DirectoryMessageType) Enum() *DirectoryMessageType {
	p := new(DirectoryMessageType)
	*p = x
	return p
}
func (x DirectoryMessageType) String() string {
	return proto.EnumName(DirectoryMessageType_name, int32(x))
}
func (x *DirectoryMessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DirectoryMessageType_value, data, "DirectoryMessageType")
	if err != nil {
		return err
	}
	*x = DirectoryMessageType(value)
	return nil
}
func (DirectoryMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Directive struct {
	Type *DirectiveType `protobuf:"varint,1,req,name=type,enum=mixnet.DirectiveType" json:"type,omitempty"`
	// CREATE, a sequence of addresses (e.g. "192.168.1.1:7007")
	// comprising the circuit to be constructed over the mixnet. Each address
	// corresponds to a mixnet router except the last, which is the service the
	// proxy would like to contact.
	Addrs []string `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	Key   []byte   `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// ERROR or FATAL, an error message.
	Error            *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Directive) Reset()                    { *m = Directive{} }
func (m *Directive) String() string            { return proto.CompactTextString(m) }
func (*Directive) ProtoMessage()               {}
func (*Directive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Directive) GetType() DirectiveType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DirectiveType_ERROR
}

func (m *Directive) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *Directive) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Directive) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

type DirectoryMessage struct {
	Type *DirectoryMessageType `protobuf:"varint,1,req,name=type,enum=mixnet.DirectoryMessageType" json:"type,omitempty"`
	// Addresses to register to or delete from the directory,
	// or list of all available mixnets
	Addrs []string `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	Keys  [][]byte `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
	// Possible error message
	Error            *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DirectoryMessage) Reset()                    { *m = DirectoryMessage{} }
func (m *DirectoryMessage) String() string            { return proto.CompactTextString(m) }
func (*DirectoryMessage) ProtoMessage()               {}
func (*DirectoryMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DirectoryMessage) GetType() DirectoryMessageType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DirectoryMessageType_REGISTER
}

func (m *DirectoryMessage) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *DirectoryMessage) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *DirectoryMessage) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Directive)(nil), "mixnet.Directive")
	proto.RegisterType((*DirectoryMessage)(nil), "mixnet.DirectoryMessage")
	proto.RegisterEnum("mixnet.DirectiveType", DirectiveType_name, DirectiveType_value)
	proto.RegisterEnum("mixnet.DirectoryMessageType", DirectoryMessageType_name, DirectoryMessageType_value)
}

func init() { proto.RegisterFile("mixnet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x8e, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x4d, 0x66, 0x5a, 0x93, 0xdb, 0x44, 0x86, 0x41, 0x21, 0x0b, 0x17, 0xa1, 0x6e, 0x42,
	0x16, 0x5d, 0xf8, 0x06, 0xd2, 0x5c, 0x24, 0x50, 0x09, 0x4c, 0x06, 0x44, 0x5c, 0x15, 0x7b, 0x91,
	0x58, 0x34, 0x61, 0x12, 0xc4, 0x79, 0x7b, 0xc9, 0x0f, 0x4a, 0x68, 0x77, 0x73, 0x98, 0x7b, 0xbe,
	0xef, 0x40, 0xf0, 0x59, 0xfd, 0x7c, 0x51, 0xb7, 0x69, 0x4c, 0xdd, 0xd5, 0x72, 0x39, 0xa6, 0xf5,
	0x2b, 0xf8, 0x59, 0x65, 0xe8, 0xad, 0xab, 0xbe, 0x49, 0xde, 0x01, 0xef, 0x6c, 0x43, 0x91, 0x13,
	0xbb, 0xc9, 0xd5, 0xfd, 0xcd, 0x66, 0x6a, 0xfc, 0x1d, 0x68, 0xdb, 0x90, 0x0c, 0x61, 0xb1, 0x3f,
	0x1c, 0x4c, 0x1b, 0xb9, 0x31, 0x4b, 0x7c, 0xb9, 0x02, 0x76, 0x24, 0x1b, 0xb1, 0xd8, 0x49, 0x82,
	0xfe, 0x8f, 0x8c, 0xa9, 0x4d, 0xc4, 0x63, 0x27, 0xf1, 0xd7, 0x1f, 0x20, 0xc6, 0x6e, 0x6d, 0xec,
	0x13, 0xb5, 0xed, 0xfe, 0x9d, 0x64, 0x3a, 0x73, 0xdc, 0xce, 0x1d, 0xff, 0x77, 0xe7, 0x54, 0x01,
	0xf0, 0x23, 0xd9, 0x36, 0x62, 0x31, 0x3b, 0x71, 0xa5, 0x05, 0x84, 0xf3, 0x9d, 0x3e, 0x2c, 0x50,
	0xa9, 0x42, 0x89, 0x0b, 0x09, 0xb0, 0xdc, 0x2a, 0x7c, 0xd0, 0x28, 0x1c, 0xb9, 0x82, 0xcb, 0xf1,
	0x9d, 0x09, 0xb7, 0x0f, 0x19, 0x96, 0x5a, 0x15, 0x2f, 0x82, 0xc9, 0x10, 0xfc, 0x29, 0x60, 0x26,
	0x78, 0xfa, 0x0c, 0xd7, 0x67, 0x47, 0x05, 0xe0, 0x29, 0x7c, 0xcc, 0x4b, 0x8d, 0x13, 0x3a, 0xc3,
	0x1d, 0x0e, 0x68, 0x0f, 0xf8, 0x2e, 0x2f, 0xb5, 0x70, 0x07, 0x54, 0xae, 0x70, 0xab, 0x0b, 0xd5,
	0x93, 0x03, 0xf0, 0xfa, 0x38, 0xac, 0xe1, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x43, 0xe8,
	0xd2, 0x89, 0x01, 0x00, 0x00,
}
