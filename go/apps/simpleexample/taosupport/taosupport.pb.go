// Code generated by protoc-gen-go.
// source: taosupport.proto
// DO NOT EDIT!

/*
Package taosupport is a generated protocol buffer package.

It is generated from these files:
	taosupport.proto

It has these top-level messages:
	SimpleMessage
	RsaPrivateKeyMessage
	EcPrivateKeyMessage
	PrivateKeyMessage
*/
package taosupport

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MessageType int32

const (
	MessageType_REQUEST  MessageType = 1
	MessageType_RESPONSE MessageType = 2
)

var MessageType_name = map[int32]string{
	1: "REQUEST",
	2: "RESPONSE",
}
var MessageType_value = map[string]int32{
	"REQUEST":  1,
	"RESPONSE": 2,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SimpleMessage struct {
	MessageType      *int32   `protobuf:"varint,1,req,name=message_type" json:"message_type,omitempty"`
	RequestType      *string  `protobuf:"bytes,2,req,name=request_type" json:"request_type,omitempty"`
	Err              *string  `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
	Data             [][]byte `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SimpleMessage) Reset()                    { *m = SimpleMessage{} }
func (m *SimpleMessage) String() string            { return proto.CompactTextString(m) }
func (*SimpleMessage) ProtoMessage()               {}
func (*SimpleMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SimpleMessage) GetMessageType() int32 {
	if m != nil && m.MessageType != nil {
		return *m.MessageType
	}
	return 0
}

func (m *SimpleMessage) GetRequestType() string {
	if m != nil && m.RequestType != nil {
		return *m.RequestType
	}
	return ""
}

func (m *SimpleMessage) GetErr() string {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return ""
}

func (m *SimpleMessage) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RsaPrivateKeyMessage struct {
	M                []byte `protobuf:"bytes,1,opt,name=m" json:"m,omitempty"`
	E                []byte `protobuf:"bytes,2,opt,name=e" json:"e,omitempty"`
	D                []byte `protobuf:"bytes,3,opt,name=d" json:"d,omitempty"`
	P                []byte `protobuf:"bytes,4,opt,name=p" json:"p,omitempty"`
	Q                []byte `protobuf:"bytes,5,opt,name=q" json:"q,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RsaPrivateKeyMessage) Reset()                    { *m = RsaPrivateKeyMessage{} }
func (m *RsaPrivateKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*RsaPrivateKeyMessage) ProtoMessage()               {}
func (*RsaPrivateKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RsaPrivateKeyMessage) GetM() []byte {
	if m != nil {
		return m.M
	}
	return nil
}

func (m *RsaPrivateKeyMessage) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *RsaPrivateKeyMessage) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *RsaPrivateKeyMessage) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *RsaPrivateKeyMessage) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

// The cheap way
type EcPrivateKeyMessage struct {
	DerBlob          []byte `protobuf:"bytes,1,opt,name=der_blob" json:"der_blob,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EcPrivateKeyMessage) Reset()                    { *m = EcPrivateKeyMessage{} }
func (m *EcPrivateKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*EcPrivateKeyMessage) ProtoMessage()               {}
func (*EcPrivateKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EcPrivateKeyMessage) GetDerBlob() []byte {
	if m != nil {
		return m.DerBlob
	}
	return nil
}

type PrivateKeyMessage struct {
	KeyType          *string               `protobuf:"bytes,1,req,name=key_type" json:"key_type,omitempty"`
	RsaKey           *RsaPrivateKeyMessage `protobuf:"bytes,2,opt,name=rsa_key" json:"rsa_key,omitempty"`
	EcKey            *EcPrivateKeyMessage  `protobuf:"bytes,3,opt,name=ec_key" json:"ec_key,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *PrivateKeyMessage) Reset()                    { *m = PrivateKeyMessage{} }
func (m *PrivateKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*PrivateKeyMessage) ProtoMessage()               {}
func (*PrivateKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PrivateKeyMessage) GetKeyType() string {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return ""
}

func (m *PrivateKeyMessage) GetRsaKey() *RsaPrivateKeyMessage {
	if m != nil {
		return m.RsaKey
	}
	return nil
}

func (m *PrivateKeyMessage) GetEcKey() *EcPrivateKeyMessage {
	if m != nil {
		return m.EcKey
	}
	return nil
}

func init() {
	proto.RegisterType((*SimpleMessage)(nil), "taosupport.SimpleMessage")
	proto.RegisterType((*RsaPrivateKeyMessage)(nil), "taosupport.RsaPrivateKeyMessage")
	proto.RegisterType((*EcPrivateKeyMessage)(nil), "taosupport.EcPrivateKeyMessage")
	proto.RegisterType((*PrivateKeyMessage)(nil), "taosupport.PrivateKeyMessage")
	proto.RegisterEnum("taosupport.MessageType", MessageType_name, MessageType_value)
}

var fileDescriptor0 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4f, 0x83, 0x30,
	0x14, 0xc7, 0x53, 0xd8, 0xdc, 0x78, 0x60, 0x82, 0xb8, 0x03, 0x37, 0x09, 0x17, 0x89, 0x87, 0x19,
	0xfd, 0x0e, 0x3d, 0x99, 0xe9, 0x84, 0xe9, 0x95, 0x74, 0xe3, 0xc5, 0x2c, 0x8e, 0xb4, 0x6b, 0x3b,
	0x13, 0x3e, 0x82, 0xdf, 0xda, 0x52, 0x30, 0x23, 0x19, 0xb7, 0x5f, 0xff, 0xe9, 0xfb, 0xf5, 0xf5,
	0x0f, 0xa1, 0x66, 0x5c, 0x9d, 0x84, 0xe0, 0x52, 0x2f, 0x85, 0xe4, 0x9a, 0x47, 0x70, 0x4e, 0xd2,
	0x4f, 0xb8, 0x2e, 0xf6, 0xb5, 0x38, 0xe0, 0x0a, 0x95, 0x62, 0x5f, 0x18, 0x2d, 0x20, 0xa8, 0x3b,
	0x2c, 0x75, 0x23, 0x30, 0x26, 0x89, 0x93, 0x4d, 0xdb, 0x54, 0xe2, 0xf1, 0x84, 0x4a, 0x77, 0xa9,
	0x63, 0x52, 0x2f, 0xf2, 0xc1, 0x45, 0x29, 0x63, 0x37, 0x21, 0xe6, 0x10, 0xc0, 0xa4, 0x62, 0x9a,
	0xc5, 0x93, 0xc4, 0xcd, 0x82, 0x74, 0x05, 0x8b, 0x5c, 0xb1, 0xb5, 0xdc, 0xff, 0x30, 0x8d, 0x2f,
	0xd8, 0xfc, 0xeb, 0x3d, 0x20, 0xb5, 0x71, 0x92, 0x2c, 0x68, 0xb1, 0x15, 0xf5, 0x58, 0x59, 0x8d,
	0x45, 0x61, 0x1c, 0x3d, 0x1e, 0xe3, 0x69, 0x8b, 0xe9, 0x3d, 0xdc, 0xd2, 0xdd, 0xa5, 0x2d, 0x84,
	0x79, 0x85, 0xb2, 0xdc, 0x1e, 0xf8, 0xb6, 0x93, 0xa6, 0xbf, 0x04, 0x6e, 0x46, 0xef, 0x7d, 0x63,
	0x73, 0xfe, 0x90, 0x17, 0x3d, 0xc1, 0x4c, 0x2a, 0x56, 0x9a, 0xd4, 0xae, 0xe0, 0x3f, 0x27, 0xcb,
	0x41, 0x4f, 0xa3, 0xab, 0x3f, 0xc2, 0x15, 0xee, 0xec, 0x84, 0x6b, 0x27, 0xee, 0x86, 0x13, 0x23,
	0xdb, 0x3d, 0x64, 0xe0, 0xf7, 0xb8, 0x31, 0x0f, 0x9b, 0xb6, 0x66, 0x39, 0x7d, 0xff, 0xa0, 0xc5,
	0x26, 0x24, 0xa6, 0xad, 0x79, 0x4e, 0x8b, 0xf5, 0xdb, 0x6b, 0x41, 0x43, 0xe7, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0x24, 0xb6, 0x18, 0x8c, 0xa4, 0x01, 0x00, 0x00,
}
