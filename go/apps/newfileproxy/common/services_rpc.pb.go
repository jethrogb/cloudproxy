// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services_rpc.proto

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	services_rpc.proto

It has these top-level messages:
	FileproxyMessage
	UserKeyDataMessage
	UserKeysMessage
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServiceType int32

const (
	ServiceType_REQUEST_CHALLENGE  ServiceType = 1
	ServiceType_CHALLENGE_RESPONSE ServiceType = 2
	ServiceType_SIGNED_CHALLENGE   ServiceType = 3
	ServiceType_CREATE             ServiceType = 4
	ServiceType_DELETE             ServiceType = 5
	ServiceType_ADDREADER          ServiceType = 6
	ServiceType_ADDOWNER           ServiceType = 7
	ServiceType_ADDWRITER          ServiceType = 8
	ServiceType_DELETEREADER       ServiceType = 9
	ServiceType_DELETEOWNER        ServiceType = 10
	ServiceType_DELETEWRITER       ServiceType = 11
	ServiceType_READ               ServiceType = 12
	ServiceType_WRITE              ServiceType = 13
	ServiceType_SAVESTATE          ServiceType = 14
	ServiceType_NONE               ServiceType = 15
)

var ServiceType_name = map[int32]string{
	1:  "REQUEST_CHALLENGE",
	2:  "CHALLENGE_RESPONSE",
	3:  "SIGNED_CHALLENGE",
	4:  "CREATE",
	5:  "DELETE",
	6:  "ADDREADER",
	7:  "ADDOWNER",
	8:  "ADDWRITER",
	9:  "DELETEREADER",
	10: "DELETEOWNER",
	11: "DELETEWRITER",
	12: "READ",
	13: "WRITE",
	14: "SAVESTATE",
	15: "NONE",
}
var ServiceType_value = map[string]int32{
	"REQUEST_CHALLENGE":  1,
	"CHALLENGE_RESPONSE": 2,
	"SIGNED_CHALLENGE":   3,
	"CREATE":             4,
	"DELETE":             5,
	"ADDREADER":          6,
	"ADDOWNER":           7,
	"ADDWRITER":          8,
	"DELETEREADER":       9,
	"DELETEOWNER":        10,
	"DELETEWRITER":       11,
	"READ":               12,
	"WRITE":              13,
	"SAVESTATE":          14,
	"NONE":               15,
}

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}
func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}
func (x *ServiceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServiceType_value, data, "ServiceType")
	if err != nil {
		return err
	}
	*x = ServiceType(value)
	return nil
}
func (ServiceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// A FileproxyMessage is a message sent between fileproxy programs
// as the data payload of a taosupport SimpleMessage.
type FileproxyMessage struct {
	TypeOfService *ServiceType `protobuf:"varint,1,req,name=type_of_service,enum=common.ServiceType" json:"type_of_service,omitempty"`
	Err           *string      `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
	// For READ and WRITE, this is the total number of buffers constituting file.
	NumTotalBuffers *int32 `protobuf:"varint,3,opt,name=num_total_buffers" json:"num_total_buffers,omitempty"`
	// For READ and WRITE, this is the sequence number of this buffer.
	CurrentBuffer *int32 `protobuf:"varint,4,opt,name=current_buffer" json:"current_buffer,omitempty"`
	// Arguments apply to the following calls and are call dependent.
	// For CREATE, resourcename, type ("file" or "directory")
	// For DELETE, resource name
	// For READ, resource name
	// For WRITE, resource name
	// For ADDREADER, resource name
	// For ADDOWNER, resource name
	// For ADDWRITER, resource name
	// For DELETEREADER, resource name
	// For DELETEOWNER, resource name
	// For DELETEWRITER, resource name
	Arguments []string `protobuf:"bytes,5,rep,name=arguments" json:"arguments,omitempty"`
	// data is message specific
	// For REQUEST_CHALLENGE, no data or arguments.
	// For CHALLENGE, there should be one data blob which is the user x509 cert.
	// For SIGNED_CHALLENGE, there should be two data blobs: a x509 cert and the signed nonce.
	// For CREATE, list of compound certs
	// For ADDREADER, list of compound certs
	// For ADDOWNER, list of compound certs
	// For ADDWRITER, list of compound certs
	Data             [][]byte `protobuf:"bytes,6,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FileproxyMessage) Reset()                    { *m = FileproxyMessage{} }
func (m *FileproxyMessage) String() string            { return proto.CompactTextString(m) }
func (*FileproxyMessage) ProtoMessage()               {}
func (*FileproxyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FileproxyMessage) GetTypeOfService() ServiceType {
	if m != nil && m.TypeOfService != nil {
		return *m.TypeOfService
	}
	return ServiceType_REQUEST_CHALLENGE
}

func (m *FileproxyMessage) GetErr() string {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return ""
}

func (m *FileproxyMessage) GetNumTotalBuffers() int32 {
	if m != nil && m.NumTotalBuffers != nil {
		return *m.NumTotalBuffers
	}
	return 0
}

func (m *FileproxyMessage) GetCurrentBuffer() int32 {
	if m != nil && m.CurrentBuffer != nil {
		return *m.CurrentBuffer
	}
	return 0
}

func (m *FileproxyMessage) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *FileproxyMessage) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserKeyDataMessage struct {
	Cert             []byte `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	DerKey           []byte `protobuf:"bytes,2,opt,name=der_key" json:"der_key,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UserKeyDataMessage) Reset()                    { *m = UserKeyDataMessage{} }
func (m *UserKeyDataMessage) String() string            { return proto.CompactTextString(m) }
func (*UserKeyDataMessage) ProtoMessage()               {}
func (*UserKeyDataMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserKeyDataMessage) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *UserKeyDataMessage) GetDerKey() []byte {
	if m != nil {
		return m.DerKey
	}
	return nil
}

// User keys
type UserKeysMessage struct {
	SerializedKeys   [][]byte `protobuf:"bytes,1,rep,name=serialized_keys" json:"serialized_keys,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *UserKeysMessage) Reset()                    { *m = UserKeysMessage{} }
func (m *UserKeysMessage) String() string            { return proto.CompactTextString(m) }
func (*UserKeysMessage) ProtoMessage()               {}
func (*UserKeysMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserKeysMessage) GetSerializedKeys() [][]byte {
	if m != nil {
		return m.SerializedKeys
	}
	return nil
}

func init() {
	proto.RegisterType((*FileproxyMessage)(nil), "common.FileproxyMessage")
	proto.RegisterType((*UserKeyDataMessage)(nil), "common.UserKeyDataMessage")
	proto.RegisterType((*UserKeysMessage)(nil), "common.UserKeysMessage")
	proto.RegisterEnum("common.ServiceType", ServiceType_name, ServiceType_value)
}

func init() { proto.RegisterFile("services_rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xd1, 0x8e, 0x93, 0x40,
	0x14, 0x86, 0x43, 0xa1, 0xdd, 0x72, 0xca, 0x96, 0xe9, 0x51, 0x57, 0xbc, 0x23, 0xbd, 0x22, 0x1b,
	0xd3, 0x0b, 0x7d, 0x02, 0xb2, 0x1c, 0xd7, 0x8d, 0x95, 0x2a, 0xb0, 0xee, 0x25, 0x41, 0x7a, 0xba,
	0x69, 0x6c, 0x0b, 0x99, 0x99, 0x1a, 0xf1, 0x6d, 0x7c, 0x4c, 0xef, 0x0c, 0x85, 0x75, 0x7b, 0x37,
	0xf3, 0x9f, 0xef, 0x9b, 0xf9, 0x0f, 0xa0, 0x62, 0xf9, 0x73, 0x5b, 0xb2, 0xca, 0x65, 0x5d, 0x2e,
	0x6a, 0x59, 0xe9, 0x0a, 0x47, 0x65, 0xb5, 0xdf, 0x57, 0x87, 0xf9, 0x1f, 0x03, 0xc4, 0x87, 0xed,
	0x8e, 0x6b, 0x59, 0xfd, 0x6a, 0x3e, 0xb3, 0x52, 0xc5, 0x23, 0xe3, 0x5b, 0x70, 0x75, 0x53, 0x73,
	0x5e, 0x6d, 0xf2, 0x5e, 0xf5, 0x0c, 0x7f, 0x10, 0x4c, 0xdf, 0xbd, 0x58, 0x74, 0xda, 0x22, 0xed,
	0xe2, 0xac, 0xa9, 0x19, 0x27, 0x60, 0xb2, 0x94, 0xde, 0xc0, 0x37, 0x02, 0x1b, 0xdf, 0xc0, 0xec,
	0x70, 0xdc, 0xe7, 0xba, 0xd2, 0xc5, 0x2e, 0xff, 0x7e, 0xdc, 0x6c, 0x58, 0x2a, 0xcf, 0xf4, 0x8d,
	0x60, 0x88, 0x57, 0x30, 0x2d, 0x8f, 0x52, 0xf2, 0x41, 0xf7, 0x03, 0xcf, 0x3a, 0xe5, 0x33, 0xb0,
	0x0b, 0xf9, 0x78, 0xdc, 0xf3, 0x41, 0x2b, 0x6f, 0xe8, 0x9b, 0x81, 0x8d, 0x0e, 0x58, 0xeb, 0x42,
	0x17, 0xde, 0xc8, 0x37, 0x03, 0x67, 0xfe, 0x1e, 0xf0, 0x5e, 0xb1, 0xfc, 0xc4, 0x4d, 0x54, 0xe8,
	0xe2, 0xa9, 0xa4, 0x03, 0x56, 0xc9, 0x52, 0x7b, 0x86, 0x6f, 0x04, 0x0e, 0xba, 0x70, 0xb1, 0x66,
	0x99, 0xff, 0xe0, 0xe6, 0x54, 0xc4, 0x99, 0x5f, 0x83, 0xdb, 0x4b, 0xea, 0xc9, 0x78, 0x0d, 0xae,
	0x62, 0xb9, 0x2d, 0x76, 0xdb, 0xdf, 0xbc, 0x6e, 0x51, 0xe5, 0x19, 0xed, 0x07, 0xd7, 0x7f, 0x0d,
	0x98, 0x9c, 0x6f, 0xf4, 0x0a, 0x66, 0x09, 0x7d, 0xbd, 0xa7, 0x34, 0xcb, 0x6f, 0x3e, 0x86, 0xcb,
	0x25, 0xc5, 0xb7, 0x24, 0x0c, 0xbc, 0x02, 0xfc, 0x7f, 0xcd, 0x13, 0x4a, 0xbf, 0xac, 0xe2, 0x94,
	0xc4, 0x00, 0x5f, 0x82, 0x48, 0xef, 0x6e, 0x63, 0x8a, 0xce, 0x68, 0x13, 0x01, 0x46, 0x37, 0x09,
	0x85, 0x19, 0x09, 0xab, 0x3d, 0x47, 0xb4, 0xa4, 0x8c, 0xc4, 0x10, 0x2f, 0xc1, 0x0e, 0xa3, 0x28,
	0xa1, 0x30, 0xa2, 0x44, 0x8c, 0xd0, 0x81, 0x71, 0x18, 0x45, 0xab, 0x87, 0x98, 0x12, 0x71, 0xd1,
	0x0f, 0x1f, 0x92, 0xbb, 0x8c, 0x12, 0x31, 0x46, 0x01, 0x4e, 0xe7, 0xf5, 0xb8, 0x8d, 0x2e, 0x4c,
	0xba, 0xa4, 0x33, 0xe0, 0x19, 0xe9, 0xa5, 0x09, 0x8e, 0xc1, 0x6a, 0x71, 0xe1, 0xa0, 0x0d, 0xc3,
	0x53, 0x2a, 0x2e, 0xdb, 0x87, 0xd3, 0xf0, 0x1b, 0xa5, 0x59, 0x5b, 0x68, 0xda, 0x32, 0xf1, 0x2a,
	0x26, 0xe1, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x42, 0x98, 0xdb, 0x1d, 0x02, 0x00, 0x00,
}
