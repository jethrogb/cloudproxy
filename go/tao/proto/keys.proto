//  Copyright (c) 2013, Google Inc.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto2";

import "attestation.proto";

package tao;

enum CryptoVersion {
  CRYPTO_VERSION_1 = 1;
  CRYPTO_VERSION_2 = 2;
}

// CryptoHeader has been changed to include:
// key_name, key_epoch, key_type, key_purpose, key_status (all strings).
// key_epoch is monotonically increasing integer
// key_status: "primary," "pre-primary", "post-primary," "inactive," "revoked"
// key_types:
//	"aes-128-raw", "aes-256-raw",
//	"aes128-ctr", "aes256-ctr", 
//	"aes128-ctr-hmacsha256", "aes256-ctr-hmacsha256", 
//	"aes128-gcm", "aes256-gcm", 
//	"aes128-cbc-hmacsha256", "aes256-cbc-hmacsha256", "aes256-cbc-hmacsha512",
//	"hmacsha256", "hmacsha384", "hmacsha512",
//	"rsa1024", "rsa2048", "rsa3072"
//	"ecdsap256", "ecdsap384"
//	"rsa1024public", "rsa2048public", "rsa3072public"
//	"ecdsap256public", "ecdsap384public"
//	"hdkf-sha256
// key_purpose: "verifying", "signing", "crypting", "deriving", "sealing"
message CryptoHeader {
  required CryptoVersion version = 1;
  optional string key_name = 2;
  optional int32 key_epoch = 3;
  optional string key_type = 4;
  optional string key_purpose = 5;
  optional string key_status = 6;
}

// CryptoKey
message CryptoKey {
  required CryptoHeader key_header = 1;
  repeated bytes key_components = 2;
}

message CryptoKeyset {
  repeated CryptoKey keys = 1;
  optional Attestation delegation = 2;
}

// Stacked Tao hosts can invoke their host Tao to seal a serialized CryptoKeyset
// (or individual CryptoKeys).

// PBEData is used by root Tao hosts to seal a serialized CryptoKeyset
// using a user-chosen password.

// TODO(jlm): Should cipher/hmac be replaced by CryptoHeader?
message PBEData {
  required CryptoVersion version = 1;
  required string cipher = 2;  // "aes128-cbc"
  required string hmac = 3;  // "sha256"
  required int32 iterations = 4;  // 4096
  required bytes iv = 5;
  required bytes ciphertext = 6;
  // TODO(kwalsh) Should this not use a mac as well for integrity protection?
  required bytes salt = 7;
}

// Contextualized protobuf.
// SECURITY WARNING: Always choose a unique context for each unique type of
// message. One easy way to do this is to number the messages in a protocol
// and make the context "ProtocolName Message Y: ProtobufName Version X"
// Marshaled representation of this is the data that is signed.
message ContextualizedData {
	required string context = 1;
	required bytes data = 2;
}

// A PDU including metadata for representing data to be signed.  The data is
// a serialized ContextualizedData message providing unique deserialization.
message SignaturePDU {
  required CryptoHeader header = 1;
  required string context = 2;
  // The serialized ContextualizedData that is to be signed.
  required bytes data = 3;
}


// The result of signing.
message SignedData {
  required CryptoHeader header = 1;
  required bytes signature = 2;
}

// A PDU to be serialized and signed for integrity-protection when using
// encryption modes (like AES CTR with HMAC-SHA) that require a separate MAC.
// Note: We actually just hmac the partially serialized EncryptedData message
// with all fields complete except the mac field.
message EncryptionIntegrityPDU {
   required CryptoHeader header = 1;
   required bytes iv = 2;
   required bytes ciphertext = 3;
}

// The result of encrypting.
message EncryptedData {
  required CryptoHeader header = 1;
  required bytes iv = 2;
  required bytes ciphertext = 3;
  optional bytes mac = 4;  // optional for modes that don't require mac
}

// A PDU to be serialized and fed to HKDF for derivation. 
message KeyDerivationPDU {
  required bytes previous_hash = 1;
  required fixed32 size = 2;
  required string context = 3;
  required fixed32 index = 4;
}



// Remove later
enum NamedEllipticCurve {
  PRIME256_V1 = 1;  // aka secp256r1
}

message ECDSA_SHA_VerifyingKey_v1 {
  required NamedEllipticCurve curve = 1;
  required bytes ec_public = 2;  // = OpenSSL::EC_POINT_point2oct(pub_key)
}

message ECDSA_SHA_SigningKey_v1 {
  required NamedEllipticCurve curve = 1;
  required bytes ec_private = 2;  // = OpenSSL::BN_bn2bin(priv_key)
  required bytes ec_public = 3;  // = OpenSSL::EC_POINT_point2oct(pub_key)
}

enum CryptoCipherMode {
  CIPHER_MODE_CTR = 1;
}

message AES_CTR_HMAC_SHA_CryptingKey_v1 {
  required CryptoCipherMode mode = 1;
  required bytes aes_private = 2;
  required bytes hmac_private = 3;
}

enum CryptoDerivingMode {
 DERIVING_MODE_HKDF = 1;
}
message HMAC_SHA_DerivingKey_v1 {
  required CryptoDerivingMode mode = 1;
  required bytes hmac_private = 2;
}
