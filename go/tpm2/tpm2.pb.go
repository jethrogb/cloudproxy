// Code generated by protoc-gen-go.
// source: tpm2.proto
// DO NOT EDIT!

/*
Package tpm2 is a generated protocol buffer package.

It is generated from these files:
	tpm2.proto

It has these top-level messages:
	PrivateKeyBlobMessage
	RsaPublicKeyMessage
	RsaPrivateKeyMessage
	AsymmetricKeyMessage
	PublicKeyMessage
	EndorsementKeyMessage
	SigningInstructionsMessage
	X509CertRequestParametersMessage
	X509CertIssuerParametersMessage
	CertParametersMessage
	QuoteKeyInfoMessage
	ProgramKeyParameters
	ProgramCertRequestMessage
	ProgramCertResponseMessage
	CertificateChainEntryMessage
	CertificateChainMessage
	QuoteCertificationInformation
*/
package tpm2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PrivateKeyBlobMessage struct {
	KeyType          *string `protobuf:"bytes,1,req,name=key_type" json:"key_type,omitempty"`
	KeyName          *string `protobuf:"bytes,2,opt,name=key_name" json:"key_name,omitempty"`
	Blob             []byte  `protobuf:"bytes,3,opt,name=blob" json:"blob,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PrivateKeyBlobMessage) Reset()                    { *m = PrivateKeyBlobMessage{} }
func (m *PrivateKeyBlobMessage) String() string            { return proto.CompactTextString(m) }
func (*PrivateKeyBlobMessage) ProtoMessage()               {}
func (*PrivateKeyBlobMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PrivateKeyBlobMessage) GetKeyType() string {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return ""
}

func (m *PrivateKeyBlobMessage) GetKeyName() string {
	if m != nil && m.KeyName != nil {
		return *m.KeyName
	}
	return ""
}

func (m *PrivateKeyBlobMessage) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type RsaPublicKeyMessage struct {
	KeyName          *string `protobuf:"bytes,1,opt,name=key_name" json:"key_name,omitempty"`
	BitModulusSize   *int32  `protobuf:"varint,2,req,name=bit_modulus_size" json:"bit_modulus_size,omitempty"`
	Exponent         []byte  `protobuf:"bytes,3,req,name=exponent" json:"exponent,omitempty"`
	Modulus          []byte  `protobuf:"bytes,4,req,name=modulus" json:"modulus,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RsaPublicKeyMessage) Reset()                    { *m = RsaPublicKeyMessage{} }
func (m *RsaPublicKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*RsaPublicKeyMessage) ProtoMessage()               {}
func (*RsaPublicKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RsaPublicKeyMessage) GetKeyName() string {
	if m != nil && m.KeyName != nil {
		return *m.KeyName
	}
	return ""
}

func (m *RsaPublicKeyMessage) GetBitModulusSize() int32 {
	if m != nil && m.BitModulusSize != nil {
		return *m.BitModulusSize
	}
	return 0
}

func (m *RsaPublicKeyMessage) GetExponent() []byte {
	if m != nil {
		return m.Exponent
	}
	return nil
}

func (m *RsaPublicKeyMessage) GetModulus() []byte {
	if m != nil {
		return m.Modulus
	}
	return nil
}

type RsaPrivateKeyMessage struct {
	PublicKey        *RsaPublicKeyMessage `protobuf:"bytes,1,req,name=public_key" json:"public_key,omitempty"`
	D                []byte               `protobuf:"bytes,2,opt,name=d" json:"d,omitempty"`
	P                []byte               `protobuf:"bytes,3,opt,name=p" json:"p,omitempty"`
	Q                []byte               `protobuf:"bytes,4,opt,name=q" json:"q,omitempty"`
	Dp               []byte               `protobuf:"bytes,5,opt,name=dp" json:"dp,omitempty"`
	Dq               []byte               `protobuf:"bytes,6,opt,name=dq" json:"dq,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *RsaPrivateKeyMessage) Reset()                    { *m = RsaPrivateKeyMessage{} }
func (m *RsaPrivateKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*RsaPrivateKeyMessage) ProtoMessage()               {}
func (*RsaPrivateKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RsaPrivateKeyMessage) GetPublicKey() *RsaPublicKeyMessage {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *RsaPrivateKeyMessage) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *RsaPrivateKeyMessage) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *RsaPrivateKeyMessage) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *RsaPrivateKeyMessage) GetDp() []byte {
	if m != nil {
		return m.Dp
	}
	return nil
}

func (m *RsaPrivateKeyMessage) GetDq() []byte {
	if m != nil {
		return m.Dq
	}
	return nil
}

type AsymmetricKeyMessage struct {
	Key              *RsaPrivateKeyMessage `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *AsymmetricKeyMessage) Reset()                    { *m = AsymmetricKeyMessage{} }
func (m *AsymmetricKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*AsymmetricKeyMessage) ProtoMessage()               {}
func (*AsymmetricKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AsymmetricKeyMessage) GetKey() *RsaPrivateKeyMessage {
	if m != nil {
		return m.Key
	}
	return nil
}

type PublicKeyMessage struct {
	KeyType          *string              `protobuf:"bytes,1,opt,name=key_type" json:"key_type,omitempty"`
	RsaKey           *RsaPublicKeyMessage `protobuf:"bytes,2,opt,name=rsa_key" json:"rsa_key,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *PublicKeyMessage) Reset()                    { *m = PublicKeyMessage{} }
func (m *PublicKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*PublicKeyMessage) ProtoMessage()               {}
func (*PublicKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PublicKeyMessage) GetKeyType() string {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return ""
}

func (m *PublicKeyMessage) GetRsaKey() *RsaPublicKeyMessage {
	if m != nil {
		return m.RsaKey
	}
	return nil
}

type EndorsementKeyMessage struct {
	MachineIdentifier *string `protobuf:"bytes,1,opt,name=machine_identifier" json:"machine_identifier,omitempty"`
	Tpm2BBlob         []byte  `protobuf:"bytes,2,opt,name=tpm2b_blob" json:"tpm2b_blob,omitempty"`
	Tpm2Name          []byte  `protobuf:"bytes,3,opt,name=tpm2_name" json:"tpm2_name,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *EndorsementKeyMessage) Reset()                    { *m = EndorsementKeyMessage{} }
func (m *EndorsementKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*EndorsementKeyMessage) ProtoMessage()               {}
func (*EndorsementKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EndorsementKeyMessage) GetMachineIdentifier() string {
	if m != nil && m.MachineIdentifier != nil {
		return *m.MachineIdentifier
	}
	return ""
}

func (m *EndorsementKeyMessage) GetTpm2BBlob() []byte {
	if m != nil {
		return m.Tpm2BBlob
	}
	return nil
}

func (m *EndorsementKeyMessage) GetTpm2Name() []byte {
	if m != nil {
		return m.Tpm2Name
	}
	return nil
}

type SigningInstructionsMessage struct {
	Issuer           *string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	Duration         *int64  `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	Purpose          *string `protobuf:"bytes,3,opt,name=purpose" json:"purpose,omitempty"`
	Date             *string `protobuf:"bytes,4,opt,name=date" json:"date,omitempty"`
	Time             *string `protobuf:"bytes,5,opt,name=time" json:"time,omitempty"`
	SignAlg          *string `protobuf:"bytes,6,opt,name=sign_alg" json:"sign_alg,omitempty"`
	HashAlg          *string `protobuf:"bytes,7,opt,name=hash_alg" json:"hash_alg,omitempty"`
	IsCA             *bool   `protobuf:"varint,8,opt,name=isCA" json:"isCA,omitempty"`
	CanSign          *bool   `protobuf:"varint,9,opt,name=can_sign" json:"can_sign,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SigningInstructionsMessage) Reset()                    { *m = SigningInstructionsMessage{} }
func (m *SigningInstructionsMessage) String() string            { return proto.CompactTextString(m) }
func (*SigningInstructionsMessage) ProtoMessage()               {}
func (*SigningInstructionsMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SigningInstructionsMessage) GetIssuer() string {
	if m != nil && m.Issuer != nil {
		return *m.Issuer
	}
	return ""
}

func (m *SigningInstructionsMessage) GetDuration() int64 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *SigningInstructionsMessage) GetPurpose() string {
	if m != nil && m.Purpose != nil {
		return *m.Purpose
	}
	return ""
}

func (m *SigningInstructionsMessage) GetDate() string {
	if m != nil && m.Date != nil {
		return *m.Date
	}
	return ""
}

func (m *SigningInstructionsMessage) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *SigningInstructionsMessage) GetSignAlg() string {
	if m != nil && m.SignAlg != nil {
		return *m.SignAlg
	}
	return ""
}

func (m *SigningInstructionsMessage) GetHashAlg() string {
	if m != nil && m.HashAlg != nil {
		return *m.HashAlg
	}
	return ""
}

func (m *SigningInstructionsMessage) GetIsCA() bool {
	if m != nil && m.IsCA != nil {
		return *m.IsCA
	}
	return false
}

func (m *SigningInstructionsMessage) GetCanSign() bool {
	if m != nil && m.CanSign != nil {
		return *m.CanSign
	}
	return false
}

type X509CertRequestParametersMessage struct {
	CommonName          *string           `protobuf:"bytes,1,req,name=common_name" json:"common_name,omitempty"`
	CountryName         *string           `protobuf:"bytes,2,opt,name=country_name" json:"country_name,omitempty"`
	StateName           *string           `protobuf:"bytes,3,opt,name=state_name" json:"state_name,omitempty"`
	LocalityName        *string           `protobuf:"bytes,4,opt,name=locality_name" json:"locality_name,omitempty"`
	OrganizationName    *string           `protobuf:"bytes,5,opt,name=organization_name" json:"organization_name,omitempty"`
	SuborganizationName *string           `protobuf:"bytes,6,opt,name=suborganization_name" json:"suborganization_name,omitempty"`
	Key                 *PublicKeyMessage `protobuf:"bytes,7,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized    []byte            `json:"-"`
}

func (m *X509CertRequestParametersMessage) Reset()         { *m = X509CertRequestParametersMessage{} }
func (m *X509CertRequestParametersMessage) String() string { return proto.CompactTextString(m) }
func (*X509CertRequestParametersMessage) ProtoMessage()    {}
func (*X509CertRequestParametersMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7}
}

func (m *X509CertRequestParametersMessage) GetCommonName() string {
	if m != nil && m.CommonName != nil {
		return *m.CommonName
	}
	return ""
}

func (m *X509CertRequestParametersMessage) GetCountryName() string {
	if m != nil && m.CountryName != nil {
		return *m.CountryName
	}
	return ""
}

func (m *X509CertRequestParametersMessage) GetStateName() string {
	if m != nil && m.StateName != nil {
		return *m.StateName
	}
	return ""
}

func (m *X509CertRequestParametersMessage) GetLocalityName() string {
	if m != nil && m.LocalityName != nil {
		return *m.LocalityName
	}
	return ""
}

func (m *X509CertRequestParametersMessage) GetOrganizationName() string {
	if m != nil && m.OrganizationName != nil {
		return *m.OrganizationName
	}
	return ""
}

func (m *X509CertRequestParametersMessage) GetSuborganizationName() string {
	if m != nil && m.SuborganizationName != nil {
		return *m.SuborganizationName
	}
	return ""
}

func (m *X509CertRequestParametersMessage) GetKey() *PublicKeyMessage {
	if m != nil {
		return m.Key
	}
	return nil
}

type X509CertIssuerParametersMessage struct {
	CommonName          *string           `protobuf:"bytes,1,req,name=common_name" json:"common_name,omitempty"`
	CountryName         *string           `protobuf:"bytes,2,opt,name=country_name" json:"country_name,omitempty"`
	StateName           *string           `protobuf:"bytes,3,opt,name=state_name" json:"state_name,omitempty"`
	LocalityName        *string           `protobuf:"bytes,4,opt,name=locality_name" json:"locality_name,omitempty"`
	OrganizationName    *string           `protobuf:"bytes,5,opt,name=organization_name" json:"organization_name,omitempty"`
	SuborganizationName *string           `protobuf:"bytes,6,opt,name=suborganization_name" json:"suborganization_name,omitempty"`
	Purpose             *string           `protobuf:"bytes,7,opt,name=purpose" json:"purpose,omitempty"`
	Key                 *PublicKeyMessage `protobuf:"bytes,8,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized    []byte            `json:"-"`
}

func (m *X509CertIssuerParametersMessage) Reset()                    { *m = X509CertIssuerParametersMessage{} }
func (m *X509CertIssuerParametersMessage) String() string            { return proto.CompactTextString(m) }
func (*X509CertIssuerParametersMessage) ProtoMessage()               {}
func (*X509CertIssuerParametersMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *X509CertIssuerParametersMessage) GetCommonName() string {
	if m != nil && m.CommonName != nil {
		return *m.CommonName
	}
	return ""
}

func (m *X509CertIssuerParametersMessage) GetCountryName() string {
	if m != nil && m.CountryName != nil {
		return *m.CountryName
	}
	return ""
}

func (m *X509CertIssuerParametersMessage) GetStateName() string {
	if m != nil && m.StateName != nil {
		return *m.StateName
	}
	return ""
}

func (m *X509CertIssuerParametersMessage) GetLocalityName() string {
	if m != nil && m.LocalityName != nil {
		return *m.LocalityName
	}
	return ""
}

func (m *X509CertIssuerParametersMessage) GetOrganizationName() string {
	if m != nil && m.OrganizationName != nil {
		return *m.OrganizationName
	}
	return ""
}

func (m *X509CertIssuerParametersMessage) GetSuborganizationName() string {
	if m != nil && m.SuborganizationName != nil {
		return *m.SuborganizationName
	}
	return ""
}

func (m *X509CertIssuerParametersMessage) GetPurpose() string {
	if m != nil && m.Purpose != nil {
		return *m.Purpose
	}
	return ""
}

func (m *X509CertIssuerParametersMessage) GetKey() *PublicKeyMessage {
	if m != nil {
		return m.Key
	}
	return nil
}

type CertParametersMessage struct {
	Request          *X509CertRequestParametersMessage `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Signer           *X509CertIssuerParametersMessage  `protobuf:"bytes,2,opt,name=signer" json:"signer,omitempty"`
	NotBefore        *string                           `protobuf:"bytes,3,opt,name=not_before" json:"not_before,omitempty"`
	NotAfter         *string                           `protobuf:"bytes,4,opt,name=not_after" json:"not_after,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *CertParametersMessage) Reset()                    { *m = CertParametersMessage{} }
func (m *CertParametersMessage) String() string            { return proto.CompactTextString(m) }
func (*CertParametersMessage) ProtoMessage()               {}
func (*CertParametersMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CertParametersMessage) GetRequest() *X509CertRequestParametersMessage {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *CertParametersMessage) GetSigner() *X509CertIssuerParametersMessage {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *CertParametersMessage) GetNotBefore() string {
	if m != nil && m.NotBefore != nil {
		return *m.NotBefore
	}
	return ""
}

func (m *CertParametersMessage) GetNotAfter() string {
	if m != nil && m.NotAfter != nil {
		return *m.NotAfter
	}
	return ""
}

type QuoteKeyInfoMessage struct {
	// public key parameters of "quote-key"
	PublicKey *PublicKeyMessage `protobuf:"bytes,1,opt,name=public_key" json:"public_key,omitempty"`
	// Tpm2 name (hash) of the "quote-key" info
	Name []byte `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// objectAttributes of the "quote key"
	Properties       *int32 `protobuf:"varint,3,opt,name=properties" json:"properties,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *QuoteKeyInfoMessage) Reset()                    { *m = QuoteKeyInfoMessage{} }
func (m *QuoteKeyInfoMessage) String() string            { return proto.CompactTextString(m) }
func (*QuoteKeyInfoMessage) ProtoMessage()               {}
func (*QuoteKeyInfoMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *QuoteKeyInfoMessage) GetPublicKey() *PublicKeyMessage {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *QuoteKeyInfoMessage) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *QuoteKeyInfoMessage) GetProperties() int32 {
	if m != nil && m.Properties != nil {
		return *m.Properties
	}
	return 0
}

type ProgramKeyParameters struct {
	ProgramName           *string `protobuf:"bytes,1,opt,name=program_name" json:"program_name,omitempty"`
	ProgramKeyType        *string `protobuf:"bytes,2,opt,name=program_key_type" json:"program_key_type,omitempty"`
	ProgramBitModulusSize *int32  `protobuf:"varint,3,opt,name=program_bit_modulus_size" json:"program_bit_modulus_size,omitempty"`
	ProgramKeyExponent    []byte  `protobuf:"bytes,4,opt,name=program_key_exponent" json:"program_key_exponent,omitempty"`
	ProgramKeyModulus     []byte  `protobuf:"bytes,5,opt,name=program_key_modulus" json:"program_key_modulus,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *ProgramKeyParameters) Reset()                    { *m = ProgramKeyParameters{} }
func (m *ProgramKeyParameters) String() string            { return proto.CompactTextString(m) }
func (*ProgramKeyParameters) ProtoMessage()               {}
func (*ProgramKeyParameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ProgramKeyParameters) GetProgramName() string {
	if m != nil && m.ProgramName != nil {
		return *m.ProgramName
	}
	return ""
}

func (m *ProgramKeyParameters) GetProgramKeyType() string {
	if m != nil && m.ProgramKeyType != nil {
		return *m.ProgramKeyType
	}
	return ""
}

func (m *ProgramKeyParameters) GetProgramBitModulusSize() int32 {
	if m != nil && m.ProgramBitModulusSize != nil {
		return *m.ProgramBitModulusSize
	}
	return 0
}

func (m *ProgramKeyParameters) GetProgramKeyExponent() []byte {
	if m != nil {
		return m.ProgramKeyExponent
	}
	return nil
}

func (m *ProgramKeyParameters) GetProgramKeyModulus() []byte {
	if m != nil {
		return m.ProgramKeyModulus
	}
	return nil
}

type ProgramCertRequestMessage struct {
	RequestId           *string               `protobuf:"bytes,1,opt,name=request_id" json:"request_id,omitempty"`
	EndorsementCertBlob []byte                `protobuf:"bytes,2,opt,name=endorsement_cert_blob" json:"endorsement_cert_blob,omitempty"`
	ProgramKey          *ProgramKeyParameters `protobuf:"bytes,3,opt,name=program_key" json:"program_key,omitempty"`
	QuoteSignAlg        *string               `protobuf:"bytes,4,opt,name=quote_sign_alg" json:"quote_sign_alg,omitempty"`
	QuoteSignHashAlg    *string               `protobuf:"bytes,5,opt,name=quote_sign_hash_alg" json:"quote_sign_hash_alg,omitempty"`
	QuoteSignature      []byte                `protobuf:"bytes,6,opt,name=quote_signature" json:"quote_signature,omitempty"`
	QuoteKeyInfo        *QuoteKeyInfoMessage  `protobuf:"bytes,7,opt,name=quote_key_info" json:"quote_key_info,omitempty"`
	QuotedBlob          []byte                `protobuf:"bytes,8,opt,name=quoted_blob" json:"quoted_blob,omitempty"`
	XXX_unrecognized    []byte                `json:"-"`
}

func (m *ProgramCertRequestMessage) Reset()                    { *m = ProgramCertRequestMessage{} }
func (m *ProgramCertRequestMessage) String() string            { return proto.CompactTextString(m) }
func (*ProgramCertRequestMessage) ProtoMessage()               {}
func (*ProgramCertRequestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ProgramCertRequestMessage) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

func (m *ProgramCertRequestMessage) GetEndorsementCertBlob() []byte {
	if m != nil {
		return m.EndorsementCertBlob
	}
	return nil
}

func (m *ProgramCertRequestMessage) GetProgramKey() *ProgramKeyParameters {
	if m != nil {
		return m.ProgramKey
	}
	return nil
}

func (m *ProgramCertRequestMessage) GetQuoteSignAlg() string {
	if m != nil && m.QuoteSignAlg != nil {
		return *m.QuoteSignAlg
	}
	return ""
}

func (m *ProgramCertRequestMessage) GetQuoteSignHashAlg() string {
	if m != nil && m.QuoteSignHashAlg != nil {
		return *m.QuoteSignHashAlg
	}
	return ""
}

func (m *ProgramCertRequestMessage) GetQuoteSignature() []byte {
	if m != nil {
		return m.QuoteSignature
	}
	return nil
}

func (m *ProgramCertRequestMessage) GetQuoteKeyInfo() *QuoteKeyInfoMessage {
	if m != nil {
		return m.QuoteKeyInfo
	}
	return nil
}

func (m *ProgramCertRequestMessage) GetQuotedBlob() []byte {
	if m != nil {
		return m.QuotedBlob
	}
	return nil
}

type ProgramCertResponseMessage struct {
	RequestId    *string `protobuf:"bytes,1,opt,name=request_id" json:"request_id,omitempty"`
	ProgramName  *string `protobuf:"bytes,2,opt,name=program_name" json:"program_name,omitempty"`
	IntegrityAlg *string `protobuf:"bytes,3,opt,name=integrity_alg" json:"integrity_alg,omitempty"`
	// outer HMAC, does not include size in buffer
	// HMAC key is KDFa derived from seed and "INTEGRITY"
	// This is a TPM2B_DIGEST and has a size.
	IntegrityHMAC []byte `protobuf:"bytes,4,opt,name=integrityHMAC" json:"integrityHMAC,omitempty"`
	// encIdentity, does not include size of encIdentity in buffer.
	// encIdentity should be an encrypted correctly marshalled
	// This is an encrypted TPM2B_DIGEST and has a size.
	// encIdentity is always CFB Aes-128 encrypted
	// with KDFa derived key derived from the "seed," "STORAGE" and
	// the name of the quote key.
	EncIdentity []byte `protobuf:"bytes,5,opt,name=encIdentity" json:"encIdentity,omitempty"`
	// protector-key private-key encrypted seed || "IDENTITY" buffer
	Secret []byte `protobuf:"bytes,6,opt,name=secret" json:"secret,omitempty"`
	// Signed, der-encoded program cert CTR encrypted with
	// secret in credential buffer.  TODO(jlm): should also
	// contain an HMAC.
	EncryptedCert     []byte `protobuf:"bytes,7,opt,name=encrypted_cert" json:"encrypted_cert,omitempty"`
	EncryptedCertHmac []byte `protobuf:"bytes,8,opt,name=encrypted_cert_hmac" json:"encrypted_cert_hmac,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *ProgramCertResponseMessage) Reset()                    { *m = ProgramCertResponseMessage{} }
func (m *ProgramCertResponseMessage) String() string            { return proto.CompactTextString(m) }
func (*ProgramCertResponseMessage) ProtoMessage()               {}
func (*ProgramCertResponseMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ProgramCertResponseMessage) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

func (m *ProgramCertResponseMessage) GetProgramName() string {
	if m != nil && m.ProgramName != nil {
		return *m.ProgramName
	}
	return ""
}

func (m *ProgramCertResponseMessage) GetIntegrityAlg() string {
	if m != nil && m.IntegrityAlg != nil {
		return *m.IntegrityAlg
	}
	return ""
}

func (m *ProgramCertResponseMessage) GetIntegrityHMAC() []byte {
	if m != nil {
		return m.IntegrityHMAC
	}
	return nil
}

func (m *ProgramCertResponseMessage) GetEncIdentity() []byte {
	if m != nil {
		return m.EncIdentity
	}
	return nil
}

func (m *ProgramCertResponseMessage) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *ProgramCertResponseMessage) GetEncryptedCert() []byte {
	if m != nil {
		return m.EncryptedCert
	}
	return nil
}

func (m *ProgramCertResponseMessage) GetEncryptedCertHmac() []byte {
	if m != nil {
		return m.EncryptedCertHmac
	}
	return nil
}

type CertificateChainEntryMessage struct {
	SubjectKeyName   *string `protobuf:"bytes,1,opt,name=subject_key_name" json:"subject_key_name,omitempty"`
	IssuerKeyName    *string `protobuf:"bytes,2,opt,name=issuer_key_name" json:"issuer_key_name,omitempty"`
	CertType         *string `protobuf:"bytes,3,opt,name=cert_type" json:"cert_type,omitempty"`
	CertBlob         []byte  `protobuf:"bytes,4,opt,name=cert_blob" json:"cert_blob,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CertificateChainEntryMessage) Reset()                    { *m = CertificateChainEntryMessage{} }
func (m *CertificateChainEntryMessage) String() string            { return proto.CompactTextString(m) }
func (*CertificateChainEntryMessage) ProtoMessage()               {}
func (*CertificateChainEntryMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CertificateChainEntryMessage) GetSubjectKeyName() string {
	if m != nil && m.SubjectKeyName != nil {
		return *m.SubjectKeyName
	}
	return ""
}

func (m *CertificateChainEntryMessage) GetIssuerKeyName() string {
	if m != nil && m.IssuerKeyName != nil {
		return *m.IssuerKeyName
	}
	return ""
}

func (m *CertificateChainEntryMessage) GetCertType() string {
	if m != nil && m.CertType != nil {
		return *m.CertType
	}
	return ""
}

func (m *CertificateChainEntryMessage) GetCertBlob() []byte {
	if m != nil {
		return m.CertBlob
	}
	return nil
}

type CertificateChainMessage struct {
	Entry            []*CertificateChainEntryMessage `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *CertificateChainMessage) Reset()                    { *m = CertificateChainMessage{} }
func (m *CertificateChainMessage) String() string            { return proto.CompactTextString(m) }
func (*CertificateChainMessage) ProtoMessage()               {}
func (*CertificateChainMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CertificateChainMessage) GetEntry() []*CertificateChainEntryMessage {
	if m != nil {
		return m.Entry
	}
	return nil
}

type QuoteCertificationInformation struct {
	Magic            []byte `protobuf:"bytes,1,opt,name=magic" json:"magic,omitempty"`
	Type             []byte `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Qualifiedsigner  []byte `protobuf:"bytes,3,opt,name=qualifiedsigner" json:"qualifiedsigner,omitempty"`
	ExtraData        []byte `protobuf:"bytes,4,opt,name=extraData" json:"extraData,omitempty"`
	Clockinfo        []byte `protobuf:"bytes,5,opt,name=clockinfo" json:"clockinfo,omitempty"`
	Firmwareversion  *int64 `protobuf:"varint,6,opt,name=firmwareversion" json:"firmwareversion,omitempty"`
	PcrSelection     []byte `protobuf:"bytes,7,opt,name=pcr_selection" json:"pcr_selection,omitempty"`
	Digest           []byte `protobuf:"bytes,8,opt,name=digest" json:"digest,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *QuoteCertificationInformation) Reset()                    { *m = QuoteCertificationInformation{} }
func (m *QuoteCertificationInformation) String() string            { return proto.CompactTextString(m) }
func (*QuoteCertificationInformation) ProtoMessage()               {}
func (*QuoteCertificationInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *QuoteCertificationInformation) GetMagic() []byte {
	if m != nil {
		return m.Magic
	}
	return nil
}

func (m *QuoteCertificationInformation) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *QuoteCertificationInformation) GetQualifiedsigner() []byte {
	if m != nil {
		return m.Qualifiedsigner
	}
	return nil
}

func (m *QuoteCertificationInformation) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *QuoteCertificationInformation) GetClockinfo() []byte {
	if m != nil {
		return m.Clockinfo
	}
	return nil
}

func (m *QuoteCertificationInformation) GetFirmwareversion() int64 {
	if m != nil && m.Firmwareversion != nil {
		return *m.Firmwareversion
	}
	return 0
}

func (m *QuoteCertificationInformation) GetPcrSelection() []byte {
	if m != nil {
		return m.PcrSelection
	}
	return nil
}

func (m *QuoteCertificationInformation) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func init() {
	proto.RegisterType((*PrivateKeyBlobMessage)(nil), "private_key_blob_message")
	proto.RegisterType((*RsaPublicKeyMessage)(nil), "rsa_public_key_message")
	proto.RegisterType((*RsaPrivateKeyMessage)(nil), "rsa_private_key_message")
	proto.RegisterType((*AsymmetricKeyMessage)(nil), "asymmetric_key_message")
	proto.RegisterType((*PublicKeyMessage)(nil), "public_key_message")
	proto.RegisterType((*EndorsementKeyMessage)(nil), "endorsement_key_message")
	proto.RegisterType((*SigningInstructionsMessage)(nil), "signing_instructions_message")
	proto.RegisterType((*X509CertRequestParametersMessage)(nil), "x509_cert_request_parameters_message")
	proto.RegisterType((*X509CertIssuerParametersMessage)(nil), "x509_cert_issuer_parameters_message")
	proto.RegisterType((*CertParametersMessage)(nil), "cert_parameters_message")
	proto.RegisterType((*QuoteKeyInfoMessage)(nil), "quote_key_info_message")
	proto.RegisterType((*ProgramKeyParameters)(nil), "program_key_parameters")
	proto.RegisterType((*ProgramCertRequestMessage)(nil), "program_cert_request_message")
	proto.RegisterType((*ProgramCertResponseMessage)(nil), "program_cert_response_message")
	proto.RegisterType((*CertificateChainEntryMessage)(nil), "certificate_chain_entry_message")
	proto.RegisterType((*CertificateChainMessage)(nil), "certificate_chain_message")
	proto.RegisterType((*QuoteCertificationInformation)(nil), "quote_certification_information")
}

var fileDescriptor0 = []byte{
	// 1016 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x56, 0x5d, 0x8e, 0x1b, 0x45,
	0x10, 0xd6, 0xd8, 0xf1, 0xae, 0x5d, 0xeb, 0xfc, 0x79, 0x13, 0x7b, 0x02, 0x1b, 0x65, 0x35, 0x24,
	0x62, 0x25, 0x90, 0x83, 0x22, 0x40, 0xe2, 0x09, 0x45, 0xe1, 0x01, 0x24, 0x90, 0x38, 0x00, 0xd2,
	0xa8, 0x3d, 0xd3, 0x1e, 0x37, 0xf1, 0xfc, 0x6c, 0x77, 0x4f, 0x58, 0xef, 0x0b, 0x87, 0xe0, 0x0c,
	0xbc, 0x22, 0x71, 0x00, 0x0e, 0xc1, 0x13, 0x47, 0xe0, 0x1a, 0x54, 0x55, 0x4f, 0x8f, 0xc7, 0xde,
	0x18, 0xf2, 0xca, 0xdb, 0xb8, 0xba, 0xbb, 0xaa, 0xbe, 0xef, 0xab, 0xfe, 0xda, 0x00, 0xb6, 0xca,
	0x5f, 0xcc, 0x2b, 0x5d, 0xda, 0x32, 0xfa, 0x16, 0xc2, 0x4a, 0xab, 0x37, 0xc2, 0xca, 0xf8, 0xb5,
	0xdc, 0xc4, 0x8b, 0x75, 0xb9, 0x88, 0x73, 0x69, 0x8c, 0xc8, 0xe4, 0xe4, 0x1e, 0x0c, 0x29, 0x66,
	0x37, 0x95, 0x0c, 0x83, 0xf3, 0xde, 0xc5, 0xc8, 0x47, 0x0a, 0x91, 0xcb, 0xb0, 0x77, 0x1e, 0x60,
	0x64, 0x0c, 0xb7, 0xe8, 0x4c, 0xd8, 0xc7, 0x5f, 0xe3, 0x28, 0x83, 0xa9, 0x36, 0x22, 0xae, 0xea,
	0xc5, 0x5a, 0x25, 0x9c, 0x70, 0x2f, 0x17, 0x9f, 0x0c, 0xf8, 0x64, 0x08, 0xf7, 0x16, 0xca, 0xc6,
	0x79, 0x99, 0xd6, 0xeb, 0xda, 0xc4, 0x46, 0x5d, 0x53, 0xce, 0xde, 0xc5, 0x80, 0xf6, 0xca, 0xab,
	0xaa, 0x2c, 0x64, 0x61, 0x31, 0x6f, 0xef, 0x62, 0x3c, 0xb9, 0x0b, 0xc7, 0xcd, 0xbe, 0xf0, 0x16,
	0x05, 0xa2, 0x9f, 0x61, 0xc6, 0x85, 0x3a, 0xad, 0xfb, 0x4a, 0x1f, 0x01, 0x6c, 0xeb, 0x73, 0xdf,
	0x27, 0x2f, 0x66, 0xf3, 0x03, 0x6d, 0x8d, 0x20, 0x48, 0x19, 0xc9, 0x98, 0x3e, 0x2b, 0x07, 0x83,
	0x3e, 0x2f, 0xb1, 0x10, 0x7d, 0x02, 0xf4, 0xd2, 0x2a, 0x1c, 0xb4, 0xdf, 0x97, 0xe1, 0x11, 0x23,
	0xfd, 0x12, 0xa6, 0xc2, 0x6c, 0xf2, 0x5c, 0x5a, 0xbd, 0x97, 0xf2, 0x19, 0xf4, 0x5d, 0xe1, 0x00,
	0x0b, 0x87, 0xf3, 0x03, 0x6d, 0x46, 0xdf, 0xc3, 0xe4, 0x30, 0x4d, 0x0d, 0xe5, 0x44, 0xd3, 0x05,
	0x1c, 0x53, 0x0a, 0x4a, 0xd9, 0xe3, 0x94, 0x87, 0xb0, 0x44, 0x3f, 0xc0, 0x4c, 0x16, 0x69, 0xa9,
	0x8d, 0xcc, 0x91, 0xb9, 0x9d, 0xb4, 0xef, 0xc1, 0x24, 0x17, 0xc9, 0x4a, 0x15, 0x32, 0x56, 0x29,
	0x2e, 0xaa, 0xa5, 0x92, 0xba, 0x29, 0x30, 0x71, 0xf3, 0xb0, 0x60, 0xed, 0x1b, 0x2e, 0xee, 0xc3,
	0x88, 0x62, 0x4e, 0x2e, 0x27, 0xed, 0xef, 0x01, 0x9c, 0x19, 0x95, 0x15, 0xaa, 0xc8, 0x62, 0x55,
	0x18, 0xab, 0xeb, 0xc4, 0xaa, 0xb2, 0x30, 0x6d, 0x8d, 0x3b, 0x70, 0xa4, 0x8c, 0xa9, 0xdb, 0xbc,
	0x08, 0x25, 0xad, 0xb5, 0xa0, 0x4d, 0x9c, 0xb5, 0x4f, 0x2a, 0x56, 0xb5, 0xae, 0x4a, 0xe3, 0x72,
	0xf2, 0xf0, 0xa4, 0xc8, 0x0b, 0x53, 0xcd, 0xbf, 0xac, 0xc2, 0x7a, 0x03, 0x7f, 0x9c, 0xca, 0xc5,
	0x62, 0x9d, 0x31, 0xe5, 0x1c, 0x59, 0x09, 0xb3, 0xe2, 0xc8, 0xb1, 0x3f, 0xa1, 0xcc, 0xab, 0x97,
	0xe1, 0x10, 0x7f, 0x0d, 0x69, 0x3d, 0x11, 0x45, 0x4c, 0xa7, 0xc2, 0x11, 0x45, 0xa2, 0xbf, 0x02,
	0x78, 0x7a, 0xf5, 0xd9, 0x27, 0x5f, 0xc4, 0x89, 0xd4, 0x36, 0xd6, 0xf2, 0xb2, 0x96, 0xc6, 0xc6,
	0x95, 0xd0, 0x08, 0xcb, 0x4a, 0xbd, 0xed, 0xfd, 0x14, 0x4e, 0x92, 0x32, 0xcf, 0xcb, 0xc2, 0x0f,
	0x28, 0x0d, 0xfb, 0x03, 0x18, 0x27, 0x65, 0x5d, 0x58, 0xbd, 0x33, 0xf0, 0x48, 0x97, 0xb1, 0x24,
	0x66, 0xcb, 0xcd, 0x68, 0xf2, 0x10, 0x6e, 0xaf, 0xcb, 0x44, 0xac, 0x95, 0x6d, 0xb6, 0x3a, 0x40,
	0x8f, 0xe0, 0x7e, 0xa9, 0x33, 0x51, 0xa8, 0x6b, 0x66, 0xc1, 0x2d, 0x39, 0x74, 0x67, 0xf0, 0xc0,
	0xd4, 0x8b, 0x9b, 0xab, 0x0e, 0xe9, 0xb9, 0x1b, 0xa1, 0x63, 0xd6, 0xfb, 0x74, 0xfe, 0x16, 0xad,
	0xff, 0x0e, 0xe0, 0x83, 0x2d, 0x32, 0xc7, 0xfb, 0xff, 0x00, 0x58, 0x67, 0x02, 0x8e, 0xbb, 0x48,
	0x87, 0x87, 0x91, 0xfe, 0x16, 0xc0, 0x8c, 0x41, 0xbe, 0x05, 0xdd, 0xe7, 0x78, 0x37, 0x9c, 0xa8,
	0xcd, 0x75, 0x7b, 0x36, 0x7f, 0x27, 0xb9, 0x3f, 0x85, 0x23, 0x9a, 0x12, 0x1c, 0x55, 0x77, 0xa5,
	0x9e, 0xce, 0xdf, 0x85, 0x4b, 0x24, 0xa8, 0x28, 0x6d, 0xbc, 0x90, 0xcb, 0x52, 0x7b, 0x82, 0xf0,
	0xa2, 0x50, 0x4c, 0x2c, 0x71, 0xa7, 0x23, 0x27, 0x4a, 0x60, 0x7a, 0x59, 0x97, 0xcd, 0x6d, 0x57,
	0xc5, 0xb2, 0x6c, 0x13, 0x7c, 0xb8, 0xe7, 0x4c, 0x87, 0x30, 0xd3, 0x5c, 0xb7, 0xc2, 0x8c, 0xa9,
	0x2e, 0x7a, 0x75, 0x85, 0xcd, 0x29, 0x69, 0xb8, 0xee, 0x20, 0xfa, 0x35, 0x80, 0x29, 0x06, 0x33,
	0x6c, 0x92, 0x4f, 0x6e, 0xdb, 0x25, 0x75, 0xfd, 0xca, 0xae, 0xdb, 0x76, 0xf7, 0xb3, 0xc1, 0xf4,
	0x1a, 0x09, 0x42, 0xbf, 0x72, 0xc3, 0x8f, 0xb9, 0x18, 0x69, 0xda, 0x3d, 0xdb, 0x7a, 0xb3, 0x73,
	0xc8, 0xf7, 0xe1, 0xb4, 0xbb, 0xea, 0x7d, 0x9a, 0x2d, 0x33, 0xfa, 0xa5, 0x07, 0x67, 0x7e, 0x75,
	0x47, 0x95, 0x0e, 0xa9, 0x3e, 0xa4, 0xd2, 0xa6, 0xd7, 0xc7, 0xf0, 0xb0, 0x6b, 0x64, 0x7c, 0xae,
	0x63, 0x4e, 0x1f, 0xc3, 0x49, 0xa7, 0x20, 0xf7, 0x48, 0xae, 0x78, 0x80, 0x8e, 0x29, 0xdc, 0x71,
	0x72, 0xb4, 0x6e, 0xe2, 0x66, 0x18, 0xdb, 0xee, 0xc4, 0x5b, 0x63, 0x71, 0x53, 0x3c, 0x83, 0xbb,
	0xdb, 0x45, 0x61, 0x6b, 0xed, 0x06, 0x78, 0x3c, 0x79, 0xee, 0xb3, 0x79, 0x71, 0x9b, 0x4b, 0x3a,
	0x9b, 0x1f, 0xd0, 0x1c, 0x2f, 0x20, 0xaf, 0xa4, 0x0e, 0xc1, 0x90, 0x59, 0xf9, 0x33, 0x80, 0xc7,
	0x7b, 0xac, 0x18, 0xe4, 0xd4, 0xc8, 0x7f, 0xa5, 0x65, 0x5f, 0xd8, 0x9e, 0xbf, 0xa2, 0xaa, 0xb0,
	0x32, 0xd3, 0x74, 0x47, 0x09, 0x41, 0xff, 0x46, 0xf8, 0xeb, 0xef, 0x5e, 0xbe, 0x6a, 0xc4, 0xc2,
	0x76, 0x64, 0x91, 0x7c, 0xc3, 0x6f, 0x80, 0xdd, 0x34, 0xef, 0x1a, 0x3a, 0xb7, 0x91, 0x89, 0x96,
	0xb6, 0x01, 0x89, 0x94, 0xe1, 0x26, 0xbd, 0xa9, 0xa8, 0x6d, 0xea, 0x8f, 0x41, 0xb2, 0xd2, 0xbb,
	0xf1, 0x78, 0x85, 0xaf, 0x4a, 0x83, 0xe9, 0x1a, 0x9e, 0x50, 0x08, 0x5f, 0x96, 0x84, 0x4c, 0x24,
	0x59, 0x09, 0x55, 0xc4, 0x92, 0x4d, 0xc6, 0x83, 0xc2, 0x19, 0x44, 0x6f, 0xf8, 0x51, 0x26, 0xee,
	0x71, 0xea, 0x4c, 0x27, 0xf2, 0xdd, 0xdc, 0xbb, 0xbd, 0xbf, 0x17, 0x78, 0xbf, 0xb8, 0x10, 0xcf,
	0x6b, 0x7f, 0x27, 0xc4, 0x7c, 0x32, 0x2a, 0xfc, 0x13, 0xf3, 0xe8, 0x66, 0x6d, 0x5f, 0xf5, 0x39,
	0x0c, 0xb8, 0x0d, 0x2c, 0xd5, 0x47, 0xa5, 0xce, 0xe7, 0xff, 0xd1, 0x66, 0xf4, 0x47, 0x00, 0x4f,
	0x9c, 0x9a, 0xdb, 0x9d, 0xe4, 0x63, 0xa4, 0xab, 0xce, 0xf9, 0x7b, 0x72, 0x1b, 0x06, 0xb9, 0xc8,
	0x54, 0xc2, 0xfd, 0x8f, 0xf9, 0xe9, 0xf2, 0x37, 0x6a, 0xec, 0xa6, 0x07, 0x4d, 0x13, 0x1f, 0xd9,
	0xb4, 0xf1, 0x99, 0xbe, 0x7f, 0x56, 0xe5, 0x95, 0xd5, 0xe2, 0x2b, 0x61, 0x45, 0x23, 0x08, 0xa1,
	0x41, 0x8b, 0x7d, 0xcd, 0xb3, 0x34, 0xf0, 0xc7, 0x97, 0x4a, 0xe7, 0x3f, 0x09, 0x2d, 0xdf, 0xe0,
	0x04, 0xd3, 0xfb, 0x79, 0xc4, 0xef, 0x27, 0x6a, 0x5a, 0x25, 0x3a, 0x36, 0x72, 0x2d, 0xf9, 0xed,
	0x6d, 0x64, 0x41, 0xf9, 0x52, 0x95, 0x91, 0x09, 0xb2, 0x12, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x0a, 0xc8, 0xc0, 0xd7, 0xdf, 0x09, 0x00, 0x00,
}
